
#Область ОбработчикиСобытий
//@skip-check module-accessibility-at-client
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Проверка договора
    Если Не ЗначениеЗаполнено(Договор) Тогда
        Отказ = Истина;
        ВызватьИсключение "Не указан договор!";
    КонецЕсли;
    
    //@skip-check reading-attribute-from-database
    Если Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
        Отказ = Истина;
        ВызватьИсключение "Договор должен быть типа 'Абонентская плата'!";
    КонецЕсли;
    
    Если ДатаПроведенияРабот < Договор.ВКМ_ДатаНачалаАбонентскогоОбслуживания 
        ИЛИ ДатаПроведенияРабот > Договор.ВКМ_ДатаОкончанияАбонентскогоОбслуживания Тогда
        Отказ = Истина;
        ВызватьИсключение "Дата проведения работ должна быть в периоде действия договора!";
    КонецЕсли;

	// регистр ВКМ_ВыполненныеКлиентуРаботы Приход
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Для Каждого ТекСтрокаВыполненныеРаботы Из ВыполненныеРаботы Цикл
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту * Договор.ВКМ_СтоимостьЧасаРаботы;
	КонецЦикла;
	
	// Проверка для специалистов
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	Для Каждого ТекСтрокаВыполненныеРаботы Из ВыполненныеРаботы Цикл
		
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = Специалист;
		//Движение.Договор = Договор;
		Движение.ЧасовКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту * Договор.ВКМ_СтоимостьЧасаРаботы;    
	КонецЦикла;    
КонецПроцедуры

//@skip-check module-accessibility-at-client
//@skip-check data-exchange-load
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	    
	Если ЭтоНовый() Тогда
		// Создаем уведомление о новой заявке
		ТекстСообщения = "Новая заявка на " + ДатаПроведенияРабот + 
		". Специалист: " + Специалист + 
		". Время: " + ВремяНачалаРаботПлан + "-" + ВремяОкончанияРаботПлан;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиентов.ВремяНачалаРаботПлан КАК ВремяНачалаРаботПлан,
		|	ВКМ_ОбслуживаниеКлиентов.ВремяОкончанияРаботПлан КАК ВремяОкончанияРаботПлан,
		|	ВКМ_ОбслуживаниеКлиентов.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
		|	ВКМ_ОбслуживаниеКлиентов.Специалист КАК Специалист
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиентов КАК ВКМ_ОбслуживаниеКлиентов
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиентов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			Если ДатаПроведенияРабот <> Выборка.ДатаПроведенияРабот ИЛИ
				ВремяНачалаРаботПлан <> Выборка.ВремяНачалаРаботПлан ИЛИ
				ВремяОкончанияРаботПлан <> Выборка.ВремяОкончанияРаботПлан ИЛИ
				Специалист <> Выборка.Специалист Тогда
				
				ТекстСообщения = "Изменения в заявке на " + ДатаПроведенияРабот + 
				". Новый специалист: " + Специалист + 
				". Новое время: " + ВремяНачалаРаботПлан + "-" + ВремяОкончанияРаботПлан;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		// Создаем запись в справочнике уведомлений
		НовоеУведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		НовоеУведомление.ТекстСообщения = ТекстСообщения;
		
		Попытка
			НовоеУведомление.Записать();
		Исключение
			// В случае ошибки записи в справочник, пишем в журнал регистрации
			ЗаписьЖурналаРегистрации("ОшибкаУведомления", 
			УровеньЖурналаРегистрации.Ошибка, 
			"Не удалось создать уведомление: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
           
КонецПроцедуры 
#КонецОбласти

